"파일 위치 : ~/.vim/vimrc

" syntax {{{
syntax enable           " 문법 하이라이트 킴
" }}}

" {{{ let
" 명령어 시작키 추가
let mapleader = "\\"

" file explorer의 리스팅 방식설정
let g:netrw_liststyle=3

" file explorer의 크기 지정. 퍼센트값
let g:netrw_winsize=35

" file explorer에서 파일을 열 때 새탭으로 열게됨. :Lex를 중심으로 쓸거라 의미 없을듯
" let g:netrw_browse_split=3
" }}}

" set {{{
"자연스러운 위아래 커서이동
    set number            " line 표시를 해줍니다.
    set ai                    " auto indent
    set si					" smart indent
"     set cindent            " c style indent
    set shiftwidth=4      " shift를 4칸으로 ( >, >>, <, << 등의 명령어)
    set shiftround
    set tabstop=4         " tab을 4칸으로
    set softtabstop=4
    set expandtab       " tab 대신 띄어쓰기로
    set shiftround      " >> 를 통해서 정렬을 해줄 때 가장 가까운 indent level 로 이동.
"     set ignorecase      " 검색시 대소문자 구별하지않음
    set hlsearch         " 검색시 하이라이트(색상 강조)
    set background=dark  " 검정배경을 사용할 때, (이 색상에 맞춰 문법 하이라이트 색상이 달라집니다.)
"     set nocompatible   " 방향키로 이동가능
"     set fileencodings=utf-8,euc-kr    " 파일인코딩 형식 지정
    set encoding=utf-8
    set bs=indent,eol,start    " backspace 키 사용 가능
    set history=20    " 명령어에 대한 히스토리를 20개까지
    set ruler              " 상태표시줄에 커서의 위치 표시
"     set nobackup      " 백업파일을 만들지 않음
    set title               " 제목을 표시
    set showmatch      " 매칭되는 괄호를 보여줌
    set matchtime=1    " 매칭되는 괄호를 보여주는 시간 (10 분의 n초)
"     set nowrap         " 자동 줄바꿈 하지 않음
"     set wmnu           " tab 자동완성시 가능한 목록을 보여줌
    set scrolloff=8 "search 결과의 위치를 화면 아래에서 8만큼 띄움
    set cursorline      " 현재 커서 위치를 표시
    highlight CursorLine cterm=NONE ctermbg=darkgray
    set laststatus=2    " window 상태창 표시, 1 - window가 2개 이상일 경우 on. 0 - off
    set incsearch       " 단어 검색을 위해 타이핑 할때 하이라이팅
    set nrformats=      " Vim treat all numerals as decimal. C-a, C-x 

" 파일을 닫으면 undo 기록이 모두 사라지는데, 이를 관리하는 파일을 생성한다.
    set undofile
    set undodir=~/.vim/undodir

"     set mouse=a
"     set clipboard=unnamed
"     set backupcopy=yes

execute "set <M-1>=\e1"
execute "set <M-2>=\e2"
execute "set <M-3>=\e3"
execute "set <M-4>=\e4"
execute "set <M-5>=\e5"
execute "set <M-6>=\e6"
execute "set <M-7>=\e7"
execute "set <M-8>=\e8"
" }}}

" noremap {{{
" window change by alt - n {{{
    noremap <M-1> <esc>1gt
    noremap <M-2> <esc>2gt
    noremap <M-3> <esc>3gt
    noremap <M-4> <esc>4gt
    noremap <M-5> <esc>5gt
    noremap <M-6> <esc>6gt
    noremap <M-7> <esc>7gt
    noremap <M-8> <esc>8gt
" }}}
" }}}


" vnoremap {{{
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
" }}}

" Vimscript file setting {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}
" inoremap {{{
inoremap <S-Tab> <C-V><Tab>
" }}}

" nnoremap {{{

" ctags {{{
"map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR> "tab으로 열기
noremap <C-\>l :vsp <CR>:exec("tag ".expand("<cword>"))<CR><C-W>r
noremap <C-\>h :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
noremap <C-\>k :sp <CR>:exec("tag ".expand("<cword>"))<CR>
noremap <C-\>j :sp <CR>:exec("tag ".expand("<cword>"))<CR><C-W>r
" }}}

" edit vimrc {{{
" -ev: edit vimrc
" vimrc 수정
nnoremap <leader>ev :vsp $MYVIMRC<cr>

" -sv: source vimrc
" vimrc 적용
nnoremap <leader>sv :source $MYVIMRC<cr>
" }}}

" templates {{{
" <cr>podcode: enter pod code template
nnoremap <cr>podcode i=begin html<cr><cr><pre><code class=' hljs'><cr></code></pre><cr><cr>=end html<cr><cr><esc>

" <cr>pl: enter perl script template
nnoremap <cr>pl i#!/usr/bin/env perl<cr><cr>use strict;<cr>use warnings;<cr>use feature qw/ say/;<cr><cr><esc>

" <cr>perl: enter perl module template
nnoremap <cr>pm i#!/usr/bin/env perl<cr><cr>use strict;<cr>use warnings;<cr>use feature qw/ say/;<cr><cr><esc>

" }}}

" comments {{{
" 주석 / 해제
noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <leader>cx :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>
" }}}

nnoremap <leader>p :!latexmk -pdf % && mupdf %:r.pdf &<CR>

" 보완필요 - 파일 시작과 끝부분에서 애매하게 동작
" 행 위, 아래로 이동
nnoremap <C-k> :m-2<CR>
nnoremap <C-j> :m+1<CR>

" 탭이 열리며 새 파일을 선택하는 화면이 나옴
nnoremap <silent> <c-s-n> :tabnew <bar> Exp<cr>

" 탭이 열리게 바꿔야함.
" nnoremap <silent> <c-s-n> :Exp<cr>
" 새탭 + 터미널
" nnoremap <c-s-t> :tab terminal<cr>

" increase indents for inner block
nnoremap <leader>ib >i{
" decrease indents for inner block
nnoremap <leader>db <i{

" 파일탐색기 열기
nnoremap <F3> :Lex<CR>:set wrap<CR>

" 라인번호 토글링
nnoremap <F5> :setlocal number!<CR>

" 하이라이트 토글링
nnoremap <F6> :setlocal hlsearch!<CR>

" fold 계층 보여주는 화면 토글링
nnoremap <leader>fdc :call FoldColumnToggle()<cr>

nnoremap * :set hlsearch<CR> * <S-n>

" select word
nnoremap <space> viwh
" 단어 감싸기
nnoremap <leader>w" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>w' viw<esc>a'<esc>hbi'<esc>lel


" 책에서 나오는 :silent execute 를 사용했는데  slient (grep 의 결과를 보이지 않는 기능) 때문에
" 몇몇 vim 출력이 사라지는 문제 때문에 제거함
nnoremap <leader>g :execute "grep! -R " . shellescape(expand("<cWORD>")) . " ."<cr>:copen<cr>

function! FoldColumnToggle()
    if &foldcolumn
        setlocal foldcolumn=0
    else
        setlocal foldcolumn=4
    endif
endfunction


" autocmd {{{

" autosave
" autocmd FileType * autocmd TextChanged,InsertLeave <buffer> if &readonly == 0 | silent write | endif
" Commenting blocks of code. {{{
autocmd FileType c,cpp,java,scala,js,rust                let b:comment_leader = '// '
autocmd FileType perl,sh,ruby,python,conf,fstab     let b:comment_leader = '# '
autocmd FileType conf,fstab                         let b:comment_leader = '# '
autocmd FileType tex                                let b:comment_leader = '% '
autocmd FileType mail                               let b:comment_leader = '> '
autocmd FileType vim                                let b:comment_leader = '" '
" }}}


" run script {{{
autocmd FileType rust nnoremap <leader>rs :w<CR> :!clear && rustc % -o %:r && ./%:r<CR>
autocmd FileType perl nnoremap <leader>rs :! perl %<cr>
autocmd FileType sh nnoremap <leader>rs :! sh %<cr>
autocmd FileType javascript nnoremap <leader>rs :! node %<cr>
autocmd FileType python nnoremap <leader>rs :! python %<cr>
" }}}

" }}}

" operator {{{

" GrepOperator 
" grep 의 결과를 quickfix window 에 넣는다.
" g@ - operatorfunc 를 실행 (operatorfunc 은 특수 키워드임), movement 의 양 끝을 각각 '[, '] 에 할당
" <c-u> visual 모드를 사용하다보면 '<,'> 가 나오는데 이를 지우고 명령어를 시작하는 역할
nnoremap <leader>g :set operatorfunc=<SID>GrepOperator<cr>g@
vnoremap <leader>g :<c-u>call <SID>GrepOperator(visualmode())<cr>

function! s:GrepOperator(type)
    let saved_unnamed_register = @@

    if a:type ==# 'v'
        normal! `<v`>y
    elseif a:type ==# 'char'
        normal! `[v`]y
    else
        return
    endif

    silent execute "grep! -R " . shellescape(@@) . " ."
    copen
    execute "normal! \<c-l>"

    let @@ = saved_unnamed_register
endfunction

" }}}



" escape HTML tag
" vnoremap <F5> '<,'>s/

"markdown 하이라이트
hi markdownItalic cterm=italic ctermfg=lightmagenta
hi markdownBold cterm=bold ctermfg=lightmagenta
hi markdownBoldItalic cterm=bold,italic ctermfg=lightmagenta
hi markdownCode ctermbg=darkgreen


"

"mojo 하이라이트
"Configurations variables:
    :let mojo_highlight_data = 1
	"Highlight embedded Perl code in __DATA__ sections of your Perl files.

"   :let mojo_disable_html = 1
	"Don't highlight html inside __DATA__ templates - Perl code only.

"   :let mojo_no_helpers = 1
	"Don't highlight default and tag helpers.

"복붙기능 - xclip 필요
"vmap <C-c> : '<,'>w! ~/xclip \| !xclip -sel clip < ~/xclip <ENTER> <ENTER>
"set clipboard=unnamedplus - 아래를 쓰려면 필요하다는데 없어도 되더라
vnoremap <C-c> y:call system("xclip -i -selection clipboard", getreg("\""))<CR>:call system("xclip -i", getreg("\""))<CR><Return>




syntax enable
filetype plugin indent on
